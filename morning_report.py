# -*- coding: utf-8 -*-
import os, json, time, requests
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
from scheduler import build_combined_pdf_report # XLSX –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

from app_config import TZ, BOT_TOKEN, VADIM_CHAT_ID, ASSISTANT_CHAT_IDS
from db import (
    count_open_like,
    count_closed_between,
    get_overdue_open_tasks,
    get_deadline_changes_between,
    get_tasks_due_on,
    get_task,
    get_nickname_by_tid,
)

TZINFO = ZoneInfo(TZ)
TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
WEEKDAYS = {0,1,2,3,4}  # –ø–Ω‚Äì–ø—Ç

def _assignee_with_nick(name: str | None, tid: str | None) -> str:
    n = (name or "‚Äî").strip()
    nick = (get_nickname_by_tid(tid or "") or "").strip()
    if nick:
        if not nick.startswith("@"):
            nick = "@" + nick
        return f"{n} ({nick})"
    return n

def _fmt_date(d: str) -> str:
    if not d: return "‚Äî"
    try:
        y,m,dd = map(int, d.split("-"))
        months = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]
        return f"{dd} {months[m-1]} {y}"
    except Exception:
        return d

def _send_document(chat_id: str, file_path: str, caption: str | None = None):
    try:
        with open(file_path, "rb") as f:
            files = {"document": (os.path.basename(file_path), f)}
            data = {"chat_id": str(chat_id)}
            if caption:
                data["caption"] = caption
                data["parse_mode"] = "HTML"
            requests.post(f"{TG_API}/sendDocument", data=data, files=files, timeout=60)
    except Exception:
        pass

def _send(chat_id: str, text: str):
    payload = {"chat_id": str(chat_id), "text": text, "parse_mode":"HTML", "disable_web_page_preview": True}
    r = requests.post(f"{TG_API}/sendMessage", json=payload, timeout=20)
    if not r.ok and "message is too long" in (r.text or "").lower():
        # –ø—Ä–æ—Å—Ç–∞—è –Ω–∞—Ä–µ–∑–∫–∞, –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –¥–ª–∏–Ω–Ω–æ
        parts, cur = [], ""
        for line in text.split("\n"):
            add = (line + "\n")
            if len(cur) + len(add) < 3800:
                cur += add
            else:
                parts.append(cur); cur = add
        if cur.strip():
            parts.append(cur)
        for i, p in enumerate(parts, 1):
            requests.post(
                f"{TG_API}/sendMessage",
                json={
                    "chat_id": str(chat_id),
                    "text": (f"(—á–∞—Å—Ç—å {i}/{len(parts)})\n\n" + p),
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                },
                timeout=20
            )

def _prev_workday(now_local: datetime) -> datetime:
    d = now_local - timedelta(days=1)
    while d.weekday() not in WEEKDAYS:
        d -= timedelta(days=1)
    return d

def build_morning_summary(now_local: datetime) -> str:
    """
    –û—Ç—á—ë—Ç –∑–∞ –ø—Ä–µ–¥. —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–æ–∫–Ω–æ: 09:00 –ø—Ä–µ–¥.—Ä–∞–±.–¥–Ω—è ‚Üí 09:00 —Å–µ–≥–æ–¥–Ω—è).
    –†–∞–∑–¥–µ–ª—ã:
      1) ¬´–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —Å—É—Ç–∫–∏¬ª ‚Äî —Ç–µ, —É –∫–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª –í–ß–ï–†–ê –∏ –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–ª–∞—Å—å –æ—Ç–∫—Ä—ã—Ç–æ–π.
      2) ¬´–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (–≤—á–µ—Ä–∞ –Ω–µ —É—Å–ø–µ–ª–∏ –∏ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω)¬ª ‚Äî —É –∫–æ–≥–æ —Å—Ç–∞—Ä—ã–π –¥–µ–¥–ª–∞–π–Ω –±—ã–ª –í–ß–ï–†–ê –∏ –≤ –æ–∫–Ω–µ –µ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–±—É–¥—É—â–µ–µ.
    """
    # –æ–∫–Ω–æ
    end_local   = now_local.replace(hour=9, minute=0, second=0, microsecond=0)
    start_local = _prev_workday(end_local).replace(hour=9, minute=0, second=0, microsecond=0)
    start_utc = start_local.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    end_utc   = end_local.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

    today_str     = end_local.strftime("%Y-%m-%d")
    yesterday_str = (end_local - timedelta(days=1)).strftime("%Y-%m-%d")

    # –º–µ—Ç—Ä–∏–∫–∏
    total_open_like  = count_open_like()                         # open + in_progress (—Å—Ä–µ–∑ –Ω–∞ —Å–µ–π—á–∞—Å)
    closed_last_day  = count_closed_between(start_utc, end_utc)  # –∑–∞–∫—Ä—ã—Ç—ã –≤ –æ–∫–Ω–µ
    overall_overdue  = get_overdue_open_tasks(today_str)         # –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ–π—á–∞—Å
    overall_overdue_count = len(overall_overdue)

    # --- 2-—è —á–∞—Å—Ç—å: –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–µ–¥–ª–∞–π–Ω–∞ ¬´—Å–æ –≤—á–µ—Ä–∞¬ª –≤–ø–µ—Ä—ë–¥ –≤ –¥–∞–Ω–Ω–æ–º –æ–∫–Ω–µ
    changes = get_deadline_changes_between(start_utc, end_utc)   # —É–∂–µ JOIN —Å tasks
    postponed_map = {}  # task_id -> (task_row, old_deadline, new_deadline)
    for row in changes:
        try:
            tid = int(row["task_id"])
        except Exception:
            continue
        t = get_task(tid)
        if not t:
            continue
        if t["status"] not in ("open", "in_progress"):
            continue
        oldd = (row["old_deadline"] or "").strip()
        newd = (row["new_deadline"] or "").strip()
        if oldd == yesterday_str and (newd and newd >= today_str):
            postponed_map[tid] = (t, oldd, newd)

    postponed_yesterday = list(postponed_map.values())
    postponed_ids = set(postponed_map.keys())

    # --- 1-—è —á–∞—Å—Ç—å: –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ "–∑–∞ —Å—É—Ç–∫–∏" –∏ –ù–ï –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã
    due_yesterday_rows = get_tasks_due_on(yesterday_str)
    newly_overdue = [
        r for r in due_yesterday_rows
        if r["status"] in ("open", "in_progress") and int(r["id"]) not in postponed_ids
    ]

    # –¢–µ–∫—Å—Ç
    lines = []
    lines.append("üßæ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å—É—Ç–∫–∏</b>\n")
    lines.append(f"üåü–ó–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ –≤—Å–µ–≥–æ: <b>{total_open_like}</b> (–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏ –≤–∑—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É)")
    lines.append(f"üî• –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ —Å—É—Ç–∫–∏: <b>{closed_last_day}</b>")
    lines.append(f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —Å—É—Ç–∫–∏: <b>{len(newly_overdue)}</b>")
    lines.append(f"‚õîÔ∏è –û–±—â–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ —Å–µ–π—á–∞—Å: <b>{overall_overdue_count}</b>\n")

    if newly_overdue:
        lines.append("<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —Å—É—Ç–∫–∏:</b>")
        for t in newly_overdue:
            dl = _fmt_date((t["deadline"] or "").strip())
            lines.append(
                f"ID: <code>{t['id']}</code>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {t['task']}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {_assignee_with_nick(t['assignee'], t['telegram_id'])}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {dl}\n"
            )

    if postponed_yesterday:
        lines.append("<b>–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (–≤—á–µ—Ä–∞ –Ω–µ —É—Å–ø–µ–ª–∏ –∏ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω):</b>")
        for (t, oldd, newd) in postponed_yesterday:
            lines.append(
                f"ID: <code>{t['id']}</code>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {t['task']}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {_assignee_with_nick(t['assignee'], t['telegram_id'])}\n"
                f"–ü–µ—Ä–µ–Ω–æ—Å: {_fmt_date(oldd)} ‚Üí {_fmt_date(newd)}\n"
            )

    lines.append("‚¨áÔ∏è–û—Ç—á—ë—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –≤–Ω–∏–∑—É‚¨áÔ∏è")
    lines.append("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/outdated</b>")
    return "\n".join(lines)

def main():
    now_local = datetime.now(TZINFO)
    # —Ç–æ–ª—å–∫–æ –ø–æ –±—É–¥–Ω—è–º
    if now_local.weekday() not in WEEKDAYS:
        return

    # 1) —Ç–µ–∫—Å—Ç
    text = build_morning_summary(now_local)

    # 2) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ PDF –ø–æ –ª—é–¥—è–º (open/in_progress)
    combined_pdf = build_combined_pdf_report(now_local)

    recipients = [str(VADIM_CHAT_ID), *map(str, ASSISTANT_CHAT_IDS)]
    sent = set()
    for cid in recipients:
        cid = (cid or "").strip()
        if not cid or cid in sent:
            continue
        # —Ç–µ–∫—Å—Ç
        try:
            _send(cid, text)
        except Exception:
            pass
        # –æ–¥–∏–Ω –æ–±—â–∏–π —Ñ–∞–π–ª
        if combined_pdf:
            try:
                _send_document(cid, combined_pdf, caption="üìé –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
            
            except Exception:
                pass
        sent.add(cid)

if __name__ == "__main__":
    main()
