# -*- coding: utf-8 -*-
import asyncio, os, tempfile, csv, io
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo
from typing import List, Tuple
from uuid import uuid4
import re
from datetime import date
from app_config import BOT_TOKEN, TZ, WORK_END_HOUR, VADIM_CHAT_ID, ASSISTANT_CHAT_IDS

from telegram import (Update, InlineKeyboardButton as B, InlineKeyboardMarkup as KM, Message, InputFile)
from telegram.error import Forbidden, BadRequest, TelegramError
from telegram.error import BadRequest as TG_BadRequest
from telegram.constants import ParseMode, ChatType
from telegram.ext import Application, ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from html import escape as h


from db import (
    list_unique_assignees, get_tasks_by_tid_openlike, insert_task, update_task_assignment, get_task,
    set_task_status, set_task_deadline, set_task_text, set_task_priority, mark_cancelled,
    track_chat, set_last_chat_offset, get_last_chat_offset, list_tracked_chats,
    fetch_proposed_tasks, find_open_tasks_for_user, get_priority, get_tasks_by_assignee_openlike,
    get_all_tasks, get_reassignments_for_task, get_deadline_changes_for_task, enqueue_outbox,
    assignee_exists_by_tid, get_nickname_by_tid, get_overdue_open_tasks
)


from llm import llm_route
from nlp import looks_like_task, extract_deadline, extract_priority, strip_bot_mention, detect_assignee
from voice import transcribe_telegram_file


import logging, sys
LOG_PATH = "/home/loyo/projects/VadimsTasks/bot.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    handlers=[logging.FileHandler(LOG_PATH, encoding="utf-8"), logging.StreamHandler(sys.stdout)],
)
logger = logging.getLogger("bot")
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.INFO)
logging.getLogger("telegram.ext").setLevel(logging.INFO)
logger = logging.getLogger("bot")

ASK_DEADLINE, REASON_NOT_RELEVANT = range(2)


TZINFO = ZoneInfo(TZ)
from datetime import timezone  # –Ω–∞–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ —É–∂–µ –µ—Å—Ç—å datetime/timedelta

WEEKDAYS = {0,1,2,3,4}        # –ø–Ω‚Äì–ø—Ç
GRACE_MINUTES = 30            # –¥–æ 18:30 –º–æ–∂–Ω–æ —Å–ª–∞—Ç—å –∞–ª—ë—Ä—Ç—ã –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö

MONTHS_RU = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]
ISO_DATE_RE = re.compile(r"\b(\d{4})-(\d{2})-(\d{2})\b")



async def safe_edit_text(msg, text, reply_markup=None):
    try:
        await msg.edit_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except TG_BadRequest as e:
        if "not modified" in str(e).lower():
            return
        raise
def _in_task_alert_window(dt_local):
    local = dt_local.astimezone(TZINFO)
    if local.weekday() not in WEEKDAYS:
        return False
    if local.hour < 9:
        return False
    # —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ 18:30 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    if local.hour > 18 or (local.hour == 18 and local.minute > GRACE_MINUTES):
        return False
    return True

def _next_work_morning(dt_local):
    d = dt_local.astimezone(TZINFO)
    # –µ—Å–ª–∏ –ø–æ—Å–ª–µ 18:30 ‚Äî –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å; –µ—Å–ª–∏ –¥–æ 09:00 ‚Äî –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 09:00
    if d.hour > 18 or (d.hour == 18 and d.minute > GRACE_MINUTES):
        d = d + timedelta(days=1)
    d = d.replace(hour=9, minute=0, second=0, microsecond=0)
    while d.weekday() not in WEEKDAYS:
        d = (d + timedelta(days=1)).replace(hour=9, minute=0, second=0, microsecond=0)
    return d.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

# ===== –ë—É—Ñ–µ—Ä—ã –Ω–∞ –¥–µ–Ω—å =========================================================
# MESSAGE_BUFFER: (mid, username, full_name, text, dt)
MESSAGE_BUFFER: dict[str, list[tuple[int, str, str, str, datetime]]] = {}
# VOICE_BUFFER:   (mid, username, full_name, file_id, dt)
VOICE_BUFFER: dict[str, list[tuple[int, str, str, str, datetime]]] = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≤—å—é/–ø—Ä–∞–≤–æ–∫
RV_WAIT_DESC, RV_WAIT_ASSIGNEE_PICK, RV_WAIT_DEADLINE, RV_WAIT_PRIORITY, RV_WAIT_CANCEL_REASON, RV_WAIT_PROOF = range(6)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–æ–≤
CHECK_STATE = {}     # assistant_id -> {"rows": [...], "idx": 0, "msg_id": int}
FLOW_STATE = {}      # user_id -> {"rows": [...], "idx": 0, "msg_id": int, "assignee": (name, tid)}

BOT_USERNAME = ""
ALLOWED_FLOW_VIEWERS = { str(VADIM_CHAT_ID), *map(str, ASSISTANT_CHAT_IDS) }

MYTASK_STATE = {}
NT_TEXT, NT_ASSIGNEE, NT_PRIORITY, NT_DEADLINE = range(4)

# --------------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –®–¢–£–ö–ò
# --------------------------------------------------------------------------------
async def first_touch_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –õ–° –∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ assignees ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ Telegram ID.
    """
    # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
    if update.effective_chat.type != ChatType.PRIVATE:
        return
    user = update.effective_user
    if not user:
        return
    uid = str(user.id)

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if assignee_exists_by_tid(uid):
        return

    # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    if context.user_data.get("sent_tid_once"):
        return

    msg = (
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.\n\n"
        f"–¢–≤–æ–π Telegram ID: <code>{uid}</code>\n\n"
        "–ü–µ—Ä–µ—à–ª–∏ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—á—Ç–æ–±—ã —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)."
    )
    try:
        # –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É
        if update.effective_message:
            await update.effective_message.reply_text(msg, parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=uid, text=msg, parse_mode=ParseMode.HTML)
    finally:
        context.user_data["sent_tid_once"] = True

async def notify_assistants(context, text: str):
    now = datetime.now(TZINFO)
    if _in_task_alert_window(now):
        # –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        for cid in ASSISTANT_CHAT_IDS:
            try:
                await context.bot.send_message(
                    chat_id=str(cid), text=text,
                    parse_mode=ParseMode.HTML, disable_web_page_preview=True
                )
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É %s: %s", cid, e)
    else:
        # –≤–Ω–µ –æ–∫–Ω–∞ ‚Äî –ø–æ–ª–æ–∂–∏–º –≤ outbox –¥–æ 09:00 –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        not_before = _next_work_morning(now)
        for cid in ASSISTANT_CHAT_IDS:
            try:
                enqueue_outbox(str(cid), text, None, not_before)
            except Exception as e:
                logger.warning("enqueue_outbox failed for %s: %s", cid, e)

async def copy_to_assistants(context, from_chat_id, message_id):
    for cid in ASSISTANT_CHAT_IDS:
        try:
            await context.bot.copy_message(chat_id=str(cid), from_chat_id=from_chat_id, message_id=message_id)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É %s: %s", cid, e)

def get_assignee_name_list() -> list[str]:
    rows = list_unique_assignees()
    return [r[0] for r in rows if r and r[0]]

def km_review_nav(idx: int, total: int, task_id: int, context: str):
    left_dis  = idx <= 0
    right_dis = idx >= total - 1
    row_nav = [
        B("‚óÄÔ∏è", callback_data=f"nav:{context}:{max(0, idx-1)}") if not left_dis else B("‚óÄÔ∏è", callback_data="nav:noop"),
        B(f"{idx+1}/{total}", callback_data="nav:noop"),
        B("‚ñ∂Ô∏è", callback_data=f"nav:{context}:{min(total-1, idx+1)}") if not right_dis else B("‚ñ∂Ô∏è", callback_data="nav:noop"),
    ]
    row_act1 = [B("‚ñ∂Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å",      callback_data=f"act:approve:{task_id}")]
    row_act2 = [B("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",       callback_data=f"act:edit:{task_id}"),
                B("üîÅ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å",  callback_data=f"act:reassign:{task_id}")]
    row_act3 = [B("üóë –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ",     callback_data=f"act:cancel:{task_id}")]
    return KM([row_nav, row_act1, row_act2, row_act3])



def km_pick_assignee(prefix: str):
    rows = list_unique_assignees()
    rows = [(n, tid) for n, tid in rows if str(tid or "").strip()]  # —Ç–æ–ª—å–∫–æ —É –∫–æ–≥–æ –µ—Å—Ç—å telegram_id
    if not rows:
        return KM([[B("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å Telegram ID", callback_data="nav:noop")]])
    return KM([[B(n, callback_data=f"{prefix}:{tid}")] for n, tid in rows])

def fmt_date_human(yyyy_mm_dd: str | None) -> str:
    s = (yyyy_mm_dd or "").strip()
    if not s:
        return "‚Äî"
    try:
        y,m,d = s.split("-")
        y, m, d = int(y), int(m), int(d)
        return f"{d} {MONTHS_RU[m-1]} {y}"
    except Exception:
        return s

def fmt_assignee_with_nick(name: str, tid: str | None) -> str:
    name_disp = name or "‚Äî"
    nick = (get_nickname_by_tid(tid or "") or "").strip()
    if nick:
        if not nick.startswith("@"):
            nick = "@" + nick
        return f"{name_disp} ({nick})"
    return name_disp

def initial_text(
    task_text: str,
    assignee: str,
    deadline: str,
    task_id: int,
    priority: str,
    link: str | None = None
) -> str:
    # tid –¥–æ—Å—Ç–∞—ë–º –∏–∑ —Å–∞–º–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∑—è—Ç—å –Ω–∏–∫
    tid = None
    try:
        t = get_task(task_id)
        tid = t["telegram_id"] if t else None
    except Exception:
        tid = None

    link_part = f'\nüîó <a href="{link}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>' if (link or "").strip() else ""
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–µ–±—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞.\n\n"
        f"{priority_block(priority)}\n"
        f"üß© <b>{h(task_text)}</b>\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {fmt_assignee_with_nick(assignee, tid)}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(deadline)}\n"
        f"ID: #{task_id}"
        f"{link_part}\n\n"
        "–Ø –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, —Ç–∞–∫ —á—Ç–æ –ª—É—á—à–µ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å üòâ\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /mytasks"
    )
   


def priority_human(priority: str) -> str:
    return "–≤–∞–∂–Ω–∞—è" if (priority or "normal") == "high" else "–æ–±—ã—á–Ω–∞—è"

def priority_block(priority: str) -> str:
    if (priority or "normal") == "high":
        return "üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–∞–∂–Ω–∞—è ‚Äî –¥–µ–¥–ª–∞–π–Ω –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ–ª—å–∑—è."
    return "‚≠êÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –û–±—ã—á–Ω–∞—è ‚Äî –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–º–µ—Å—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"

async def notify_new_assignment(context: ContextTypes.DEFAULT_TYPE, *, to_tid: str, task, who: str):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! {who} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–ª –Ω–∞ —Ç–µ–±—è –∑–∞–¥–∞—á—É.\n\n"
        f"üß© –û–ø–∏—Å–∞–Ω–∏–µ: {h(task['task'])}\n"
        f"{priority_block(task['priority'])}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(task['deadline'])}\n\n"
        f"ID: #{task['id']}\n\n"
        "–Ø –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, —Ç–∞–∫ —á—Ç–æ –ª—É—á—à–µ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å üòâ\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /mytasks"
    )
    await context.bot.send_message(chat_id=str(to_tid), text=text, parse_mode=ParseMode.HTML)

async def send_initial(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id,
    task_text,
    assignee,
    deadline,
    task_id,
    priority,
) -> bool:
    kb = KM([[B("‚úÖ –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take:{task_id}"),
              B("üôÖ –≠—Ç–æ –Ω–µ –º–æ—è –∑–∞–¥–∞—á–∞", callback_data=f"reassign:{task_id}")]])
    try:
        link = None
        try:
            t = get_task(task_id)
            link = (t["link"] or None) if t else None
        except Exception:
            link = None
        await context.bot.send_message(
            chat_id=str(chat_id),
            text=initial_text(task_text, assignee, deadline, task_id, priority, link),
            parse_mode=ParseMode.HTML,
            reply_markup=kb
        )
        return True
    except (Forbidden, BadRequest, TelegramError) as e:
        logger.warning("DM to %s failed (initial): %s", chat_id, e)
        return False

def task_card_text(t) -> str:
    pr = "–≤–∞–∂–Ω–∞—è" if (t["priority"] or "normal") == "high" else "–æ–±—ã—á–Ω–∞—è"
    overdue = " ‚õîÔ∏è –ü–†–û–°–†–û–ß–ï–ù–û" if is_overdue_task(t) else ""
    tail = f"\nüìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(t['deadline'])}{overdue}"

    # sqlite3.Row –Ω–µ —É–º–µ–µ—Ç .get(), –∏—Å–ø–æ–ª—å–∑—É–µ–º keys() –∏ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä
    link = ""
    try:
        if "link" in t.keys():
            link = (t["link"] or "").strip()
    except Exception:
        link = ""
    link_part = f"\nüîó <a href=\"{link}\">–û—Ä–∏–≥–∏–Ω–∞–ª</a>" if link else ""
    assignee_disp = fmt_assignee_with_nick((t['assignee'] or '‚Äî'), t['telegram_id'])
    return f"üß© {h(t['task'])}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {h(assignee_disp)}{tail}\n‚≠êÔ∏è –í–∞–∂–Ω–æ—Å—Ç—å: {pr}{link_part}"




def ensure_private(update: Update) -> bool:
    return update.effective_chat.type == ChatType.PRIVATE

def iso_to_human_in_text(text: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç 2025-09-11 -> 11 –°–µ–Ω—Ç—è–±—Ä—è 2025 (—Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ)."""
    def _rep(m):
        y, mth, d = int(m.group(1)), int(m.group(2)), int(m.group(3))
        month = MONTHS_RU[mth-1]
        month_cap = month[:1].upper() + month[1:]   # –ó–∞–≥–ª–∞–≤–Ω–∞—è –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
        return f"{d} {month_cap} {y}"
    return ISO_DATE_RE.sub(_rep, text or "")

# ---------- –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π) ----------
def _ensure_future_or_today(yyyy_mm_dd: str | None) -> str | None:
    if not yyyy_mm_dd:
        return None
    try:
        d = datetime.strptime(yyyy_mm_dd, "%Y-%m-%d").date()
        today = datetime.now(TZINFO).date()
        if d < today:
            return None
        return yyyy_mm_dd
    except Exception:
        return None


def parse_any_date(s: str) -> str | None:
    s = (s or "").strip().lower()
    now = datetime.now(TZINFO)

    # –±—ã—Å—Ç—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if s in ("—Å–µ–≥–æ–¥–Ω—è","today"):     return now.strftime("%Y-%m-%d")
    if s in ("–∑–∞–≤—Ç—Ä–∞","tomorrow"):   return (now + timedelta(days=1)).strftime("%Y-%m-%d")
    if s in ("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞","day after tomorrow","after tomorrow"):
        return (now + timedelta(days=2)).strftime("%Y-%m-%d")

    # –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
    if s in ("—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é","+1 –Ω–µ–¥–µ–ª—è","+1 –Ω–µ–¥","—Å–ø—É—Å—Ç—è –Ω–µ–¥–µ–ª—é"):
        return (now + timedelta(days=7)).strftime("%Y-%m-%d")
    if s in ("—á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏","+2 –Ω–µ–¥–µ–ª–∏","+2 –Ω–µ–¥","—Å–ø—É—Å—Ç—è 2 –Ω–µ–¥–µ–ª–∏"):
        return (now + timedelta(days=14)).strftime("%Y-%m-%d")

    m = re.fullmatch(r"(—á–µ—Ä–µ–∑|–∑–∞)\s+(\d+)\s*(–¥–Ω(—è|–µ–π)?)", s)
    if m:
        n = int(m.group(2))
        return (now + timedelta(days=n)).strftime("%Y-%m-%d")

    # ¬´–∫ –ø—è—Ç–Ω–∏—Ü–µ¬ª, ¬´–∫ —á–µ—Ç–≤–µ—Ä–≥—É¬ª –∏ –ø—Ä.
    if s.startswith("–∫ "):
        wd = s.replace("–∫ ", "").strip()
        for key, idx in _WEEKDAYS_MAP.items():
            if wd.startswith(key):
                d = _next_weekday(now, idx)
                if d.date() < now.date():
                    d = d + timedelta(days=7)
                return d.strftime("%Y-%m-%d")

    if "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ" in s:
        next_mon = _next_weekday(now + timedelta(days=1), 0)
        next_fri = _next_weekday(next_mon, 4)
        return next_fri.strftime("%Y-%m-%d")

    if "–¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏" in s:
        eow = _end_of_week(now)
        return eow.strftime("%Y-%m-%d")

    # 1) –°—Ç—Ä–æ–≥–æ–µ ISO YYYY-MM-DD ‚Äî —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å–∞–º–∏, –±–µ–∑ dateutil
    m = ISO_DATE_RE.fullmatch(s)
    if m:
        y, mth, d = map(int, m.groups())
        from datetime import date as _date
        try:
            _ = _date(y, mth, d)  # –≤–∞–ª–∏–¥–∞—Ü–∏—è
            return f"{y:04d}-{mth:02d}-{d:02d}"
        except Exception:
            return None

    # 2) –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —á–µ—Ä–µ–∑ dateutil (dayfirst=True)
    try:
        from dateutil import parser as dateparser
        d = dateparser.parse(s, dayfirst=True, fuzzy=True, default=now)
        return d.strftime("%Y-%m-%d") if d else None
    except Exception:
        return None


async def approve_and_start(task_id: int, q, context):
    t = get_task(task_id)
    if not t["assignee"] or not t["telegram_id"] or not t["deadline"]:
        await q.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å/–¥–µ–¥–ª–∞–π–Ω –ø—É—Å—Ç—ã–µ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–∞–≤—å —á–µ—Ä–µ–∑ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª.")
        return

    ok = await send_initial(
        context,
        t["telegram_id"],
        t["task"],
        t["assignee"],
        t["deadline"],
        task_id,
        t["priority"]
    )

    if not ok:
        await q.message.reply_text(
            "–ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –ª–∏—á–∫—É: –æ–Ω –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª Start —É –±–æ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É ¬´/start¬ª, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´‚ñ∂Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª."
        )
        return

    # –µ—Å–ª–∏ DM —É—à—ë–ª —É—Å–ø–µ—à–Ω–æ
    set_task_status(task_id, "open")
    await q.message.reply_text("–ü–æ—Å—Ç–∞–≤–∏–ª –≤ —Ä–∞–±–æ—Ç—É. –†–∞–∑–æ—Å–ª–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. üß†")
    # üîÑ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
    await send_checktasks_carousel_refresh(q, context)
    
def km_mytask_nav(idx: int, total: int, task_id: int):
    left_dis  = idx <= 0
    right_dis = idx >= total - 1
    row_nav = [
        B("‚óÄÔ∏è", callback_data=f"mt_nav:{max(0, idx-1)}") if not left_dis else B("‚óÄÔ∏è", callback_data="mt_nav:noop"),
        B(f"{idx+1}/{total}", callback_data="mt_nav:noop"),
        B("‚ñ∂Ô∏è", callback_data=f"mt_nav:{min(total-1, idx+1)}") if not right_dis else B("‚ñ∂Ô∏è", callback_data="mt_nav:noop"),
    ]
    row_act = [
        B("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"mt_done:{task_id}"),
        B("‚è∞ –ù–µ —É—Å–ø–µ–≤–∞—é", callback_data=f"mt_cant:{task_id}")
    ]
    return KM([row_nav, row_act])

# ---------- –ù–û–í–û–ï: –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ¬´–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞¬ª ----------
def closed_card_text(t, performer_name: str | None = None) -> str:
    pr = "–í–∞–∂–Ω–∞—è üî•" if (t["priority"] or "normal") == "high" else "–û–±—ã—á–Ω–∞—è"
    link = ""
    try:
        if "link" in t.keys():
            link = (t["link"] or "").strip()
    except Exception:
        link = ""
    link_part = f"\nüîó <a href=\"{link}\">–û—Ä–∏–≥–∏–Ω–∞–ª</a>" if link else ""
    assignee_disp = performer_name or fmt_assignee_with_nick((t['assignee'] or '‚Äî'), t['telegram_id'])
    return (
        
        "‚úÖ <b>–ó–ê–î–ê–ß–ê –ó–ê–ö–†–´–¢–ê</b>\n"
        f"\nüß© –û–ø–∏—Å–∞–Ω–∏–µ: {h(t['task'])}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_disp}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(t['deadline'])}\n"
        f"‚≠êÔ∏è –í–∞–∂–Ω–æ—Å—Ç—å: {pr}\n"
        f"#ID: {t['id']}\n"
        f"{link_part}\n\n"
        "–§–∞–π–ª-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ, –µ—Å–ª–∏ –µ–≥–æ –ø—Ä–∏–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
    )

async def broadcast_task_closed(context: ContextTypes.DEFAULT_TYPE, t, performer_name: str | None, with_file_first_msg_id: int | None = None, src_chat: int | None = None):
    # –®–ª—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –≤—Å–µ–º: —à–µ—Ñ—É + –ø–æ–º–æ—â–Ω–∏–∫–∞–º
    text = closed_card_text(t, performer_name)
    # 1) —Ç–µ–∫—Å—Ç
    try:
        await context.bot.send_message(chat_id=str(VADIM_CHAT_ID), text=text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VADIM_CHAT_ID –∑–∞–∫—Ä—ã—Ç–∏–µ: %s", e)
    await notify_assistants(context, text)
    # 2) –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (src_chat/msg) ‚Äî —Å–∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ–º –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if src_chat and with_file_first_msg_id:
        try:
            await context.bot.copy_message(chat_id=str(VADIM_CHAT_ID), from_chat_id=src_chat, message_id=with_file_first_msg_id)
        except Exception:
            pass
        await copy_to_assistants(context, from_chat_id=src_chat, message_id=with_file_first_msg_id)

def _tg_message_link(chat_id: str | int, message_id: int) -> str | None:
    """
    –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –±–µ–∑ username: https://t.me/c/<abs_id_without_-100>/<msg_id>
    –ü—Ä–∏–º–µ—Ä: chat_id=-1002200866911 -> c/2200866911/12745
    """
    try:
        cid = str(chat_id)
        if cid.startswith("-100"):
            internal = cid[4:]
            return f"https://t.me/c/{internal}/{int(message_id)}"
        # –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –±—É–¥–µ—Ç username —É —á–∞—Ç–∞ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return None
    except Exception:
        return None

def km_deadline_quick(context_tag: str, task_id: int | None = None):
    """
    context_tag: newtask | rv | postpone | take
    task_id: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è rv/postpone/take; –¥–ª—è newtask –º–æ–∂–Ω–æ None
    """
    tid = str(task_id or 0)
    return KM([
        [B("–°–µ–≥–æ–¥–Ω—è",        callback_data=f"dlq:{context_tag}:{tid}:today"),
         B("–ó–∞–≤—Ç—Ä–∞",         callback_data=f"dlq:{context_tag}:{tid}:tomorrow")],
        [B("–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",   callback_data=f"dlq:{context_tag}:{tid}:plus7"),
         B("–ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", callback_data=f"dlq:{context_tag}:{tid}:plus14")],
    ])

def _date_add_days(base: datetime, days: int) -> str:
    return (base + timedelta(days=days)).strftime("%Y-%m-%d")

_WEEKDAYS_MAP = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫a":0, "–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É":0,
    "–≤—Ç–æ—Ä–Ω–∏–∫":1, "–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫—É":1,
    "—Å—Ä–µ–¥–∞":2, "—Å—Ä–µ–¥—É":2, "–∫ —Å—Ä–µ–¥–µ":2,
    "—á–µ—Ç–≤–µ—Ä–≥":3, "–∫ —á–µ—Ç–≤–µ—Ä–≥—É":3,
    "–ø—è—Ç–Ω–∏—Ü–∞":4, "–ø—è—Ç–Ω–∏—Ü—É":4, "–∫ –ø—è—Ç–Ω–∏—Ü–µ":4,
    "—Å—É–±–±–æ—Ç–∞":5, "—Å—É–±–±–æ—Ç—É":5, "–∫ —Å—É–±–±–æ—Ç–µ":5,
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µu":6, "–∫ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—é":6,
}

def _next_weekday(from_dt: datetime, target_wd: int) -> datetime:
    cur = from_dt
    delta = (target_wd - cur.weekday()) % 7
    return cur + timedelta(days=delta if delta != 0 else 0)

def _end_of_week(from_dt: datetime) -> datetime:
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ —É–∂–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    delta = 6 - from_dt.weekday()
    return from_dt + timedelta(days=max(0, delta))

async def send_checktasks_carousel_refresh(q, context):
    uid = str(q.from_user.id)
    rows = fetch_proposed_tasks(100)
    if not rows:
        await context.bot.send_message(chat_id=q.message.chat.id, text="–ù–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë—Ç –∞–ø—Ä—É–≤–∞. –ü—É—Å—Ç–æ –∫–∞–∫ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.")
        return
    r = rows[0]
    m = await context.bot.send_message(
        chat_id=q.message.chat.id,
        text=task_card_text(r),
        reply_markup=km_review_nav(0, len(rows), r["id"], "check"),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True

    )
    CHECK_STATE[uid] = {"rows": rows, "idx": 0, "msg_id": m.message_id}

async def send_flow_carousel_refresh(q, context):
    uid = str(q.from_user.id)
    st = FLOW_STATE.get(uid) or {}
    ass = st.get("assignee")
    if not ass:
        await context.bot.send_message(chat_id=q.message.chat.id, text="–ü–æ—Ç–æ–∫ –ø—É—Å—Ç.")
        return
    name, tid = ass
    rows = get_tasks_by_tid_openlike(tid)
    if not rows:
        await context.bot.send_message(chat_id=q.message.chat.id, text=f"{name or '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}: –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
        return
    r = rows[0]
    m = await context.bot.send_message(
        chat_id=q.message.chat.id,
        text=task_card_text(r),
        reply_markup=km_review_nav(0, len(rows), r["id"], "flow"),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    FLOW_STATE[uid] = {"rows": rows, "idx": 0, "msg_id": m.message_id, "assignee": (name, tid)}

async def refresh_after_action(q, context):
    uid = str(q.from_user.id)
    mid = q.message.message_id
    # –ø–æ message_id –ø–æ–Ω–∏–º–∞–µ–º, –æ—Ç–∫—É–¥–∞ —é–∑–µ—Ä –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if uid in FLOW_STATE and FLOW_STATE[uid].get("msg_id") == mid:
        await send_flow_carousel_refresh(q, context)
        return
    if uid in CHECK_STATE and CHECK_STATE[uid].get("msg_id") == mid:
        await send_checktasks_carousel_refresh(q, context)
        return
    # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ —Ñ–ª–∞–∂–∫—É rv_origin, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞–≤–∏–ª–∏
    origin = context.user_data.pop("rv_origin", None)
    if origin == "flow":
        await send_flow_carousel_refresh(q, context)
    else:
        await send_checktasks_carousel_refresh(q, context)

def is_overdue_task(t) -> bool:
    """–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É TZ): deadline < —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ç–∞—Ç—É—Å open/in_progress."""
    try:
        if (t["status"] not in ("open", "in_progress")):
            return False
        dl = (t["deadline"] or "").strip()
        if not dl:
            return False
        d = datetime.strptime(dl, "%Y-%m-%d").date()
        today = datetime.now(TZINFO).date()
        return d < today
    except Exception:
        return False

# --------------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã
# --------------------------------------------------------------------------------
async def mytasks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    rows = find_open_tasks_for_user(uid)
    if not rows:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á. –ï–µ–µ–µ–π üéâ")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ ‚Üí –≤–ø–µ—Ä–µ–¥–∏, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ)
    overdue = [r for r in rows if is_overdue_task(r)]
    upcoming = [r for r in rows if not is_overdue_task(r)]

    def _key_deadline(t):
        dl = (t["deadline"] or "").strip()
        return (datetime.max.date() if not dl else datetime.strptime(dl, "%Y-%m-%d").date())

    overdue.sort(key=_key_deadline)   # –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ (–¥–∞–≤–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ) –≤—ã—à–µ
    upcoming.sort(key=_key_deadline)  # –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã –≤—ã—à–µ

    ordered = overdue + upcoming

    # –º–∞–ª–µ–Ω—å–∫–∞—è —à–∞–ø–∫–∞-—Ä–µ–∑—é–º–µ
    if overdue:
        await update.message.reply_text(f"–£ —Ç–µ–±—è {len(ordered)} –∑–∞–¥–∞—á(–∏), –∏–∑ –Ω–∏—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {len(overdue)} ‚õîÔ∏è")

    MYTASK_STATE[uid] = {"rows": ordered, "idx": 0, "msg_id": None}
    r = ordered[0]
    m = await update.message.reply_text(
        task_card_text(r),
        reply_markup=km_mytask_nav(0, len(ordered), r["id"]),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    MYTASK_STATE[uid]["msg_id"] = m.message_id

async def newtask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != ChatType.PRIVATE:
        await update.message.reply_text("–°–æ–∑–¥–∞—ë–º –≤ –ª–∏—á–∫–µ, –æ–∫? –ù–∞–ø–∏—à–∏ /newtask –∑–¥–µ—Å—å.")
        return ConversationHandler.END
    context.user_data["in_newtask"] = True  # üëà —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    await update.message.reply_text("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
    return NT_TEXT

async def nt_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nt_task_text"] = (update.message.text or "").strip()
    await update.message.reply_text("–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å?", reply_markup=km_pick_assignee("nt_pick"))
    return NT_ASSIGNEE

async def nt_pick_assignee_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    _, tid = q.data.split(":", 1)
    # –Ω–∞–π–¥—ë–º –∏–º—è –ø–æ tid
    name = None
    for n, t in list_unique_assignees():
        if str(t) == str(tid):
            name = n
            break
    if not name:
        await q.edit_message_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    context.user_data["nt_assignee_name"] = name
    context.user_data["nt_assignee_tid"]  = tid
    await q.edit_message_text(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}")
    await q.message.reply_text(
        "–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞?\n\n–£ –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –ø–æ–¥–≤–∏–Ω—É—Ç—å –¥–µ–¥–ª–∞–π–Ω, —É –æ–±—ã—á–Ω–æ–π ‚Äî –º–æ–∂–Ω–æ",
        reply_markup=KM([
            [B("–î–∞", callback_data="nt_pr:high"), B("–ù–µ—Ç", callback_data="nt_pr:normal")]
        ])
    )
    return NT_PRIORITY

async def nt_pick_priority_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    pr = q.data.split(":",1)[1]
    context.user_data["nt_priority"] = "high" if pr=="high" else "normal"
    await q.edit_message_text("–í–∞–∂–Ω–æ—Å—Ç—å: " + ("üî• –≤–∞–∂–Ω–∞—è" if pr=="high" else "–æ–±—ã—á–Ω–∞—è"))
    await q.message.reply_text(
        "–î–µ–¥–ª–∞–π–Ω? (–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD / ¬´–∑–∞–≤—Ç—Ä–∞¬ª / ¬´—Å–µ–≥–æ–¥–Ω—è¬ª)",
        reply_markup=km_deadline_quick("newtask")
    )
    return NT_DEADLINE

async def nt_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –º–∞—Å—Ç–µ—Ä–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if not context.user_data.get("in_newtask"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è ‚Äî –∫–æ–º–∞–Ω–¥—É–π /newtask.")
        return ConversationHandler.END

    nd_raw = parse_any_date(update.message.text or "")
    nd = _ensure_future_or_today(nd_raw)
    if not nd:
        await update.message.reply_text("–î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º –Ω–µ–ª—å–∑—è. –î–∞–π 2025-09-01 / ¬´–∑–∞–≤—Ç—Ä–∞¬ª.")
        return NT_DEADLINE

    t  = context.user_data.get("nt_task_text","")
    an = context.user_data.get("nt_assignee_name")
    at = context.user_data.get("nt_assignee_tid")
    pr = context.user_data.get("nt_priority","normal")

    from db import add_or_update_assignee
    add_or_update_assignee(an, at)

    task_id = insert_task(t, an, at, nd, priority=pr, source="manual", status="proposed")
    await update.message.reply_text(f"–î–æ–±–∞–≤–∏–ª —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å —á–µ—Ä–µ–∑ /checktasks –∏ –æ—Ç–ø—Ä–∞–≤—å –≤ —Ä–∞–±–æ—Ç—É.")

    # üëá –ø–æ–¥—á–∏—Å—Ç–∏–º –≤–µ—Å—å –º–∞—Å—Ç–µ—Ä, –≤–∫–ª—é—á–∞—è —Ñ–ª–∞–≥
    for k in ("nt_task_text","nt_assignee_name","nt_assignee_tid","nt_priority","in_newtask"):
        context.user_data.pop(k, None)
    return ConversationHandler.END

async def nt_deadline_quick_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # —Ñ–æ—Ä–º–∞—Ç callback_data: dlq:newtask:0:<code>
    try:
        _, _, _, code = q.data.split(":", 3)
    except ValueError:
        code = "today"

    now = datetime.now(TZINFO)
    if code == "today":
        nd_raw = now.strftime("%Y-%m-%d")
    elif code == "tomorrow":
        nd_raw = (now + timedelta(days=1)).strftime("%Y-%m-%d")
    elif code == "plus7":
        nd_raw = (now + timedelta(days=7)).strftime("%Y-%m-%d")
    elif code == "plus14":
        nd_raw = (now + timedelta(days=14)).strftime("%Y-%m-%d")
    else:
        nd_raw = now.strftime("%Y-%m-%d")

    nd = _ensure_future_or_today(nd_raw)
    if not nd:
        await q.message.reply_text("–î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º –Ω–µ–ª—å–∑—è. –î–∞–π 2025-09-01 / ¬´–∑–∞–≤—Ç—Ä–∞¬ª.")
        return NT_DEADLINE  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞

    t  = context.user_data.get("nt_task_text","")
    an = context.user_data.get("nt_assignee_name")
    at = context.user_data.get("nt_assignee_tid")
    pr = context.user_data.get("nt_priority","normal")

    from db import add_or_update_assignee
    add_or_update_assignee(an, at)
    insert_task(t, an, at, nd, priority=pr, source="manual", status="proposed")

    await q.message.reply_text(f"–î–æ–±–∞–≤–∏–ª —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å —á–µ—Ä–µ–∑ /checktasks –∏ –æ—Ç–ø—Ä–∞–≤—å –≤ —Ä–∞–±–æ—Ç—É.")

    # –ß–∏—Å—Ç–∏–º –º–∞—Å—Ç–µ—Ä –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ ConversationHandler
    for k in ("nt_task_text","nt_assignee_name","nt_assignee_tid","nt_priority","in_newtask"):
        context.user_data.pop(k, None)
    return ConversationHandler.END


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    uname = update.effective_user.username or "-"
    fname = update.effective_user.full_name or "-"
    logger.info("NEW /start: id=%s username=%s name=%s", uid, uname, fname)
    await update.message.reply_text("–°–∞–ª—é—Ç. –Ø –≤–µ–¥—É –∑–∞–¥–∞—á–∏. –£–ø–æ–º—è–Ω–∏ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–µ ‚Äî —è –≤—Å—ë –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é. –ù–æ —Å–ø–µ—Ä–≤–∞ –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç üòâ –ó–∞–±–µ–≥–∞–π –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!")

async def track_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return
    track_chat(chat.id, chat.title or "")
    set_last_chat_offset(chat.id, 0)
    await update.message.reply_text("–û–∫, —Ç–µ–ø–µ—Ä—å —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —ç—Ç–æ—Ç —á–∞—Ç. –ò –Ω–µ –∑–∞–±—É–¥—å –æ—Ç–∫–ª—é—á–∏—Ç—å Privacy –≤ @BotFather.")

# --------------------------------------------------------------------------------
# –ü–æ—Ç–æ–∫ –ì–†–£–ü–ü: —Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å ‚Üí candidate ‚Üí –í–°–ï–ì–î–ê proposed ‚Üí –≤ /checktasks
# --------------------------------------------------------------------------------

async def on_group_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global BOT_USERNAME
    msg: Message = update.message
    if not msg or not msg.text:
        return
    chat = msg.chat
    text = msg.text or ""
    MESSAGE_BUFFER.setdefault(str(chat.id), []).append((msg.message_id, msg.from_user.username or "",  msg.from_user.full_name, text, msg.date))
    set_last_chat_offset(chat.id, msg.message_id)

    if not BOT_USERNAME:
        me = await context.bot.get_me()
        BOT_USERNAME = me.username or ""

    mentioned = (f"@{BOT_USERNAME}".lower() in text.lower()) or any(
        e.type == "mention" and (text[e.offset:e.offset+e.length] or "").lower() == f"@{BOT_USERNAME}".lower()
        for e in (msg.entities or [])
    )
    if not mentioned:
        return

    task_text = (msg.reply_to_message.text if msg.reply_to_message and msg.reply_to_message.text else
                 strip_bot_mention(text, BOT_USERNAME)).strip()
    if not task_text:
        await msg.reply_text("–ù–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏. –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏, —è —Ç—É–ø–æ–≤–∞—Ç, –Ω–æ –Ω–∞—Å—Ç—ã—Ä–Ω—ã–π.")
        return

    msg_link = _tg_message_link(chat.id, msg.message_id)

    names = get_assignee_name_list()
    llm = llm_route(
        task_text, names,
        author_username=msg.from_user.username or "‚Äî",
        message_date=msg.date.astimezone(TZINFO).strftime("%Y-%m-%d"),
        message_link=msg_link
    ) or {}

    pr = (llm.get("priority") or "normal") if llm else extract_priority(task_text)
    dl = (llm.get("deadline") or None)    if llm else extract_deadline(task_text)

    assignee_name = None; assignee_tid = None
    if llm.get("assignee"):
        for n, tid in list_unique_assignees():
            if n == llm["assignee"]:
                assignee_name, assignee_tid = n, tid
                break
    if not assignee_name:
        cand, _ = detect_assignee(task_text, names)
        if cand:
            for n, tid in list_unique_assignees():
                if n == cand:
                    assignee_name, assignee_tid = n, tid
                    break

    logger.info("MENTION: creating proposed; pr=%s dl=%s assignee=%s text=%r",
            pr, dl, assignee_name, task_text)
    desc = (llm.get("description") or task_text).strip()
    desc = iso_to_human_in_text(desc)
    task_id = insert_task(
        desc, assignee_name or "", assignee_tid or "", dl or "",
        priority=pr, source="mention",
        source_chat_id=str(chat.id), source_message_id=msg.message_id,
        status="proposed", link=(llm.get("source_link") or msg_link or "")
    )

    await msg.reply_text("–ó–∞–¥–∞—á–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ")

    pr_h = "–í–∞–∂–Ω–∞—è üî•" if pr == "high" else "–û–±—ã—á–Ω–∞—è"
    link_line = f"\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª: {msg_link}" if msg_link else ""
    assignee_line = assignee_name or "‚Äî"
    if assignee_tid:
        _nick = get_nickname_by_tid(assignee_tid)
        if _nick:
            if not _nick.startswith("@"):
                _nick = "@" + _nick
            assignee_line = f"{assignee_line} ({_nick})"
    await notify_assistants(
        context,
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n\n"
        f"üß© –û–ø–∏—Å–∞–Ω–∏–µ: {h(desc)}\n"
        f"ü§° –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name or '‚Äî'}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(dl)}\n"
        f"‚ùóÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {pr_h}\n"   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ \n
        f"ID: #{task_id}"
        f"{link_line}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /checktasks, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
    )

async def on_group_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg: Message = update.message
    if not msg:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    chat = msg.chat
    file_id = None
    if msg.voice:
        file_id = msg.voice.file_id
    elif msg.audio:
        file_id = msg.audio.file_id
    else:
        file_id = None
    if not file_id:
        return

    uname = msg.from_user.username or ""      # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @username
    fname = msg.from_user.full_name or ""

    VOICE_BUFFER.setdefault(str(chat.id), []).append(
        (msg.message_id, uname, fname, file_id, msg.date)
)

# --------------------------------------------------------------------------------
# /checktasks ‚Äî –∫–∞—Ä—É—Å–µ–ª—å –≤—Å–µ—Ö proposed
# --------------------------------------------------------------------------------

def _ensure_check_state(user_id: str, rows):
    CHECK_STATE[user_id] = {"rows": list(rows), "idx": 0, "msg_id": None}

async def checktasks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != ChatType.PRIVATE:
        await update.message.reply_text("–≠–π, –¥–∞–≤–∞–π –≤ –ª–∏—á–∫–µ. –í–≤–µ–¥–∏ /checktasks –µ—â—ë —Ä–∞–∑ –∑–¥–µ—Å—å, –æ–∫?")
        return

    uid = str(update.effective_user.id)
    if uid not in ALLOWED_FLOW_VIEWERS:
        await update.message.reply_text("–ù–µ-–∞. –î–æ—Å—Ç—É–ø –∫ —Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ —É —à–µ—Ñ–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
        return

    rows = fetch_proposed_tasks(100)
    if not rows:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë—Ç –∞–ø—Ä—É–≤–∞. –ü—É—Å—Ç–æ –∫–∞–∫ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.")
        return

    _ensure_check_state(uid, rows)
    r = rows[0]
    m = await update.message.reply_text(
        task_card_text(r),
        reply_markup=km_review_nav(0, len(rows), r["id"], "check")
    )
    CHECK_STATE[uid]["msg_id"] = m.message_id

# --------------------------------------------------------------------------------
# /currentflow ‚Äî –≤—ã–±—Ä–∞—Ç—å –∞—Å—Å–∞–π–Ω–∏ ‚Üí –∫–∞—Ä—É—Å–µ–ª—å –≤—Å–µ—Ö –µ–≥–æ open/in_progress
# --------------------------------------------------------------------------------

async def currentflow_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != ChatType.PRIVATE:
        await update.message.reply_text("–ß–ø–æ–∫ ‚Äî –¥–∞–≤–∞–π –≤ –ª–∏—á–∫–µ. –í–≤–µ–¥–∏ /currentflow –µ—â—ë —Ä–∞–∑ —Ç—É—Ç.")
        return
    if str(update.effective_user.id) not in ALLOWED_FLOW_VIEWERS:
        await update.message.reply_text("–ù–µ-–∞. –î–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–æ–∫—É —Ç–æ–ª—å–∫–æ —É —à–µ—Ñ–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
        return
    rows = [(n, tid) for n, tid in list_unique_assignees() if str(tid or "").strip()]
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç. –ü–µ—á–∞–ª—å.")
        return
    kb = [[B(n, callback_data=f"flow_pick:{tid}")] for n, tid in rows]
    await update.message.reply_text("–ü–æ –∫–æ–º—É —Å–º–æ—Ç—Ä–∏–º –ø–æ—Ç–æ–∫?", reply_markup=KM(kb))

# --------------------------------------------------------------------------------
# /report ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ CSV
# --------------------------------------------------------------------------------
async def report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in ALLOWED_FLOW_VIEWERS:
        await update.message.reply_text("–ù–µ-–∞. –î–æ—Å—Ç—É–ø –∫ –æ—Ç—á—ë—Ç–∞–º —Ç–æ–ª—å–∫–æ —É —à–µ—Ñ–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
        return

    rows = get_all_tasks()

    def yesno(v: bool) -> str:
        return "–î–∞" if v else "–ù–µ—Ç"

    buf = io.StringIO()
    
    writer = csv.writer(buf, delimiter=";", lineterminator="\r\n")

    writer.writerow([
        "ID", "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏", "–°—Ç–∞—Ç—É—Å", "–ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–î–µ–¥–ª–∞–π–Ω",
        "–í–∞–∂–Ω–æ—Å—Ç—å", "–ë—ã–ª–∏ –ª–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?", "–° –∫–æ–≥–æ –Ω–∞ –∫–æ–≥–æ ?",
        "–ë—ã–ª –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å?", "–î–∞—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∏ –∫–µ–º"
    ])

    for r in rows:
        assigned = bool((r["assignee"] or "").strip() and (r["telegram_id"] or "").strip())

        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        reas = get_reassignments_for_task(r["id"])
        had_reassign = len(reas) > 0
        reassign_strs = []
        for x in reas:
            try:
                dt = datetime.fromisoformat((x["at"] or "").replace("Z", "+00:00")).astimezone(TZINFO)
                dstr = dt.strftime("%d.%m.%Y")
            except Exception:
                dstr = ""
            x_keys = x.keys() if hasattr(x, "keys") else []
            by_who = x["by_who"] if ("by_who" in x_keys and (x["by_who"] or "").strip()) else ""
            by = f" (–ö–µ–º: {by_who})" if by_who else ""
            reassign_strs.append(f"{x['old_assignee']} ‚Üí {x['new_assignee']} {dstr}{by}")

        # –ü–µ—Ä–µ–Ω–æ—Å—ã –¥–µ–¥–ª–∞–π–Ω–æ–≤
        dchs = get_deadline_changes_for_task(r["id"])
        had_postpone = len(dchs) > 0
        postpone_strs = []
        for d in dchs:
            d_keys = d.keys() if hasattr(d, "keys") else []
            by_who = d["by_who"] if ("by_who" in d_keys and (d["by_who"] or "").strip()) else ""
            by = f" (–ö–µ–º: {by_who})" if by_who else ""
            postpone_strs.append(f"{(d['old_deadline'] or '‚Äî')} ‚Üí {(d['new_deadline'] or '‚Äî')}{by}")

        assignee_name = (r["assignee"] or "").strip() or "‚Äî"

        writer.writerow([
            r["id"], r["task"], r["status"], yesno(assigned), assignee_name, (r["deadline"] or ""),
            (r["priority"] or "normal"), yesno(had_reassign), "; ".join(reassign_strs) or "‚Äî",
            yesno(had_postpone), "; ".join(postpone_strs) or "‚Äî"
        ])

    data = buf.getvalue().encode("utf-8-sig")
    filename = f"tasks_report_{datetime.now(TZINFO).strftime('%Y%m%d_%H%M')}.csv"

    await update.message.reply_document(
        document=InputFile(io.BytesIO(data), filename=filename),
        caption="–ì–æ—Ç–æ–≤ –æ—Ç—á—ë—Ç."
    )

async def outdated_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today_str = datetime.now(TZINFO).strftime("%Y-%m-%d")
    rows = get_overdue_open_tasks(today_str)
    if not rows:
        await update.message.reply_text("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç. –ö—Ä–∞—Å–æ—Ç–∞!")
        return
    

    lines = ["<b>–í—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ:</b>", ""]
    for t in rows:
        dl = (t["deadline"] or "").strip()
        assignee_disp = fmt_assignee_with_nick((t['assignee'] or '‚Äî'), t['telegram_id'])
        lines.append(
            f"ID: <code>{t['id']}</code>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {t['task']}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_disp}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {_fmt_date(dl)}\n"
        )

    text = "\n".join(lines)
    # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
    if len(text) < 3900:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        chunk = []
        size = 0
        for block in lines:
            b = block + "\n"
            if size + len(b) > 3500:
                await update.message.reply_text("\n".join(chunk), parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                chunk, size = [], 0
            chunk.append(block); size += len(b)
        if chunk:
            await update.message.reply_text("\n".join(chunk), parse_mode=ParseMode.HTML, disable_web_page_preview=True)

def _fmt_date(d: str) -> str:
    if not d: return "‚Äî"
    try:
        y,m,dd = map(int, d.split("-"))
        months = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]
        return f"{dd} {months[m-1]} {y}"
    except Exception:
        return d


# --------------------------------------------------------------------------------
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–æ–≤
# --------------------------------------------------------------------------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    uid = str(q.from_user.id)

    # –±—ã—Å—Ç—Ä—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
    if data.startswith("dlq:"):
        # dlq:<context>:<task_id_or_0>:<code>
        _, ctx_tag, sid, code = data.split(":", 3)
        now = datetime.now(TZINFO)

        if code == "today":
            nd_raw = now.strftime("%Y-%m-%d")
        elif code == "tomorrow":
            nd_raw = (now + timedelta(days=1)).strftime("%Y-%m-%d")
        elif code == "plus7":
            nd_raw = (now + timedelta(days=7)).strftime("%Y-%m-%d")
        elif code == "plus14":
            nd_raw = (now + timedelta(days=14)).strftime("%Y-%m-%d")
        else:
            nd_raw = now.strftime("%Y-%m-%d")

        nd = _ensure_future_or_today(nd_raw)
        if not nd:
            await q.message.reply_text("–î–∞—Ç–∞ —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –≤—ã–±–µ—Ä–∏ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—É—é –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
            return

        # newtask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ ConversationHandler (nt_deadline_quick_cb), —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç
        if ctx_tag == "newtask":
            return

        # üëá –í–ï–†–ù–ò –≠–¢–£ –°–¢–†–û–ö–£ ‚Äî –Ω—É–∂–Ω–∞ –¥–ª—è rv/postpone/take
        task_id = int(sid)

        if ctx_tag == "rv":
            set_task_deadline(task_id, nd, mark_postponed=False)
            context.user_data["rv_step"] = "priority_confirm"
            await q.message.reply_text("–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞?", reply_markup=KM([
                [B("–î–∞", callback_data="rv:prio_high"), B("–ù–µ—Ç", callback_data="rv:prio_norm")]
            ]))
            return

        if ctx_tag == "postpone":
            if (get_priority(task_id) or "normal") == "high":
                await q.message.reply_text("–≠—Ç–æ üî• –í–ê–ñ–ù–ê–Ø –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
            set_task_deadline(task_id, nd, mark_postponed=True, by_who=q.from_user.full_name or "‚Äî")
            await q.message.reply_text(f"–ü–µ—Ä–µ–Ω—ë—Å –Ω–∞ {fmt_date_human(nd)}. –ù–æ —è –≤–µ—Ä–Ω—É—Å—å üòâ")
            return

        if ctx_tag == "take":
            set_task_deadline(task_id, nd, mark_postponed=False)
            await q.message.reply_text(f"–î–µ–¥–ª–∞–π–Ω –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: {fmt_date_human(nd)}. –£–¥–∞—á–∏!")
            return

        return
        
    if data.startswith("nt_pick:") or data.startswith("nt_pr:"):
        return
    if data in ("nav:noop", "mt_nav:noop"):
        return

    # /mytasks: –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if data.startswith("mt_nav:"):
        st = MYTASK_STATE.get(uid)
        if not st or not st.get("rows"):
            await q.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        try:
            idx = int(data.split(":", 1)[1])
        except Exception:
            idx = st["idx"]
        idx = max(0, min(idx, len(st["rows"]) - 1))
        st["idx"] = idx
        r = st["rows"][idx]
        await safe_edit_text(q.message, task_card_text(r), reply_markup=km_mytask_nav(idx, len(st["rows"]), r["id"]))
        return

    # /currentflow: –≤—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞
    if data.startswith("flow_pick:"):
        _, tid = data.split(":", 1)
        # –Ω–∞–π–¥—ë–º –∏–º—è –ø–æ tid
        name = None
        for n, t in list_unique_assignees():
            if str(t) == str(tid):
                name = n
                break
        rows = get_tasks_by_tid_openlike(tid)
        if not rows:
            await safe_edit_text(q.message, f"{name or '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}: –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
            return
        FLOW_STATE[uid] = {"rows": rows, "idx": 0, "msg_id": q.message.message_id, "assignee": (name or "", tid)}
        r = rows[0]
        await safe_edit_text(q.message, task_card_text(r), reply_markup=km_review_nav(0, len(rows), r["id"], "flow"))
        return

    # –ö–∞—Ä—É—Å–µ–ª–∏: –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if data.startswith("nav:flow:"):
        idx_str = data.split(":", 2)[2]
        st = FLOW_STATE.get(uid)
        if not st or not st.get("rows"): return
        try:
            idx = int(idx_str)
        except Exception:
            idx = st["idx"]
        idx = max(0, min(idx, len(st["rows"]) - 1))
        st["idx"] = idx
        r = st["rows"][idx]
        await safe_edit_text(q.message, task_card_text(r), reply_markup=km_review_nav(idx, len(st["rows"]), r["id"], "flow"))
        return

    if data.startswith("nav:check:"):
        idx_str = data.split(":", 2)[2]
        st = CHECK_STATE.get(uid)
        if not st or not st.get("rows"): return
        try:
            idx = int(idx_str)
        except Exception:
            idx = st["idx"]
        idx = max(0, min(idx, len(st["rows"]) - 1))
        st["idx"] = idx
        r = st["rows"][idx]
        await safe_edit_text(q.message, task_card_text(r), reply_markup=km_review_nav(idx, len(st["rows"]), r["id"], "check"))

        return

    # –î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–µ–≤—å—é-–∫–∞—Ä—É—Å–µ–ª—è—Ö
    if data.startswith("act:"):
        _, action, sid = data.split(":", 2)
        task_id = int(sid)

        if action == "approve":
            await approve_and_start(task_id, q, context)
            return

        if action == "cancel":
            for key in ("await_deadline", "await_deadline_take"):
                context.user_data.pop(key, None)
            context.user_data.pop("rv_step", None)

            # –∑–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ–±—ã –ø—Ä–∏ "–°–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º" –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.user_data["await_reason"] = True
            context.user_data["rv_cancel_task"] = task_id
            src = "flow" if (uid in FLOW_STATE and FLOW_STATE[uid].get("msg_id") == q.message.message_id) else "check"
            context.user_data["rv_origin"] = src

            kb = KM([
                [B("–ù–µ –∑–∞–¥–∞—á–∞",      callback_data=f"cr:{task_id}:not_task")],
                [B("–£–∂–µ —Å–¥–µ–ª–∞–Ω–æ",    callback_data=f"cr:{task_id}:done")],
                [B("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ",   callback_data=f"cr:{task_id}:not_relevant")],
                [B("‚úçÔ∏è –°–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º", callback_data=f"cr:{task_id}:other")]
            ])
            await q.message.reply_text("–ü–æ—á–µ–º—É —Å–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É?", reply_markup=kb)
            return


        if action == "edit":
            context.user_data["rv_edit_task"] = task_id
            context.user_data["rv_step"] = "desc_confirm"
            t = get_task(task_id)
            desc = t["task"]
            await q.message.reply_text(
                "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–µ—Ä–Ω–æ?\n\n" + desc,
                reply_markup=KM([
                    [B("–î–∞", callback_data="rv:desc_ok"), B("–ù–µ—Ç", callback_data="rv:desc_no")]
                ])
            )
            return

        if action == "reassign":
            rows = [(n, tid) for n, tid in list_unique_assignees() if str(tid or "").strip()]
            kb = [[B(n, callback_data=f"rv_reassign_to:{task_id}:{tid}")] for n, tid in rows]
            src = "flow" if (uid in FLOW_STATE and FLOW_STATE[uid].get("msg_id") == q.message.message_id) else "check"
            context.user_data["rv_origin"] = src
            await q.message.reply_text("–ö–æ–º—É –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º?", reply_markup=KM(kb))
            return

    # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
    if data.startswith("cr:"):
        _, sid, code = data.split(":", 2)
        task_id = int(sid)
        reason_map = {
            "not_task":     "–ù–µ –∑–∞–¥–∞—á–∞",
            "done":         "–£–∂–µ —Å–¥–µ–ª–∞–Ω–æ",
            "not_relevant": "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ",
        }

        if code == "other":
            # –æ—Å—Ç–∞—ë–º—Å—è –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–ª–∞–≥–∏ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ
            await q.message.reply_text("–û–∫, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –≤ –∫–∞—Ä—Ç–æ—á–∫–µ.")
            return

        # –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º —Å —Ç–∏–ø–æ–≤–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
        mark_cancelled(task_id, reason_map.get(code, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ"))
        # –ø–æ–¥—á–∏—Å—Ç–∏–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –±—ã–ª
        context.user_data.pop("await_reason", None)
        context.user_data.pop("rv_cancel_task", None)
        origin = context.user_data.pop("rv_origin", None)

        await q.message.reply_text("–û–∫, —Å–Ω—è–ª —Å –ø–æ–≤–µ—Å—Ç–∫–∏. –ü—Ä–∏—á–∏–Ω—É –∑–∞–ø–∏—Å–∞–ª. ‚úÖ")
        # –æ–±–Ω–æ–≤–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å
        class Dummy: pass
        d = Dummy(); d.message = q.message; d.from_user = q.from_user
        if origin == "flow":
            await send_flow_carousel_refresh(d, context)
        else:
            await send_checktasks_carousel_refresh(d, context)
        return

    # –ú–∞—Å—Ç–µ—Ä –ø—Ä–∞–≤–æ–∫ (–ø–æ—à–∞–≥–æ–≤–æ)
    if data.startswith("rv:"):
        token = data.split(":", 1)[1]
        step = context.user_data.get("rv_step")
        task_id = context.user_data.get("rv_edit_task")

        if token == "deadline_ok" and step == "deadline_confirm":
            t = get_task(task_id)
            if not (t and (t["deadline"] or "").strip()):
                context.user_data["rv_step"] = "deadline_edit"
                await q.message.reply_text("–î–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É (YYYY-MM-DD / ¬´–∑–∞–≤—Ç—Ä–∞¬ª).")
                return
            context.user_data["rv_step"] = "priority_confirm"
            await q.message.reply_text("–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞?", reply_markup=KM([
                [B("–î–∞", callback_data="rv:prio_high"), B("–ù–µ—Ç", callback_data="rv:prio_norm")]
            ]))
            return

        if token == "desc_no" and step == "desc_confirm":
            # 1) –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç (—É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
            t = get_task(task_id)
            await q.message.reply_text(t["task"] or "‚Äî")
            # 2) –∑–∞—Ç–µ–º –Ω–∞—à–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –≤–≤–æ–¥
            context.user_data["rv_step"] = "desc_edit"
            await q.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        if token == "assignee_ok" and step == "assignee_confirm":
            t = get_task(task_id)
            cur_deadline = (t["deadline"] or "").strip()
            if not cur_deadline:
                context.user_data["rv_step"] = "deadline_edit"
                await q.message.reply_text(
                    "–î–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É (YYYY-MM-DD / ¬´–∑–∞–≤—Ç—Ä–∞¬ª).",
                    reply_markup=km_deadline_quick("rv", task_id)
                )
                return
            context.user_data["rv_step"] = "deadline_confirm"
            await q.message.reply_text(
                f"–î–µ–¥–ª–∞–π–Ω –≤–µ—Ä–µ–Ω? (—Å–µ–π—á–∞—Å: {fmt_date_human(cur_deadline)})",
                reply_markup=KM([[B("–î–∞", callback_data="rv:deadline_ok"),
                                B("–ù–µ—Ç", callback_data="rv:deadline_no")]])
            )
            return

        if token == "assignee_no" and step == "assignee_confirm":
            context.user_data["rv_step"] = "assignee_pick"
            await q.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=km_pick_assignee("rv_pick"))
            return

        if token == "desc_ok" and step == "desc_confirm":
            context.user_data["rv_step"] = "assignee_confirm"
            t = get_task(task_id)
            cur_assignee = (t["assignee"] or "").strip()
            cur_assignee_disp = fmt_assignee_with_nick(cur_assignee, t["telegram_id"])
            if not cur_assignee:
                # –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚Äî —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä, –±–µ–∑ ¬´–î–∞/–ù–µ—Ç¬ª
                context.user_data["rv_step"] = "assignee_pick"
                await q.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
                                        reply_markup=km_pick_assignee("rv_pick"))
                return
            await q.message.reply_text(
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–µ—Ä–µ–Ω? (—Å–µ–π—á–∞—Å: {cur_assignee_disp})",
                reply_markup=KM([
                    [B("–î–∞", callback_data="rv:assignee_ok"), B("–ù–µ—Ç", callback_data="rv:assignee_no")]
                ])
            )
            return

        if token == "deadline_no" and step == "deadline_confirm":
            context.user_data["rv_step"] = "deadline_edit"
            await q.message.reply_text(
                "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-01, ¬´–∑–∞–≤—Ç—Ä–∞¬ª, ¬´–∫ –ø—è—Ç–Ω–∏—Ü–µ¬ª, ¬´–¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏¬ª).",
                reply_markup=km_deadline_quick("rv", task_id)
            )
            return

        if token in ("prio_high", "prio_norm") and step == "priority_confirm":
            pr = "high" if token == "prio_high" else "normal"
            set_task_priority(task_id, pr)
            context.user_data.pop("rv_step", None)
            await approve_and_start(task_id, q, context)
            # –∫–∞—Ä—É—Å–µ–ª—å –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ –∞–ø—Ä—É–≤–∞
            return

    # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –º–∞—Å—Ç–µ—Ä–µ –ø—Ä–∞–≤–æ–∫
    if data.startswith("rv_pick:"):
        # —Ñ–æ—Ä–º–∞—Ç: rv_pick:<tid>
        _, tid = data.split(":", 1)
        # –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ tid
        name = None
        for n, t in list_unique_assignees():
            if str(t) == str(tid):
                name = n
                break
        if not name:
            await q.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
            return

        update_task_assignment(int(context.user_data.get("rv_edit_task")), name, tid, by_who=q.from_user.full_name or "‚Äî")
        t2 = get_task(int(context.user_data.get("rv_edit_task")))
        cur_deadline = (t2["deadline"] or "").strip()
        disp = fmt_assignee_with_nick(name, tid)
        if not cur_deadline:
            context.user_data["rv_step"] = "deadline_edit"
            await q.message.reply_text(
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å: {disp}\n–î–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É (YYYY-MM-DD / ¬´–∑–∞–≤—Ç—Ä–∞¬ª).",
                reply_markup=km_deadline_quick("rv", int(context.user_data.get("rv_edit_task")))
            )
        else:
            context.user_data["rv_step"] = "deadline_confirm"
            await q.message.reply_text(
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å: {disp}\n–î–µ–¥–ª–∞–π–Ω –≤–µ—Ä–µ–Ω? (—Å–µ–π—á–∞—Å: {fmt_date_human(cur_deadline)})",
                reply_markup=KM([[B("–î–∞", callback_data="rv:deadline_ok"),
                                B("–ù–µ—Ç", callback_data="rv:deadline_no")]])
            )
        return

    # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–µ–≤—å—é (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ, —Å –æ—Ç–±–∏–≤–∫–∞–º–∏)
    if data.startswith("rv_reassign_to:"):
        # —Ñ–æ—Ä–º–∞—Ç: rv_reassign_to:<task_id>:<tid>
        _, sid, tid = data.split(":", 2)
        task_id = int(sid)
        t_before = get_task(task_id)
        old_tid = t_before["telegram_id"]
        who = q.from_user.full_name or "–ö—Ç–æ-—Ç–æ —É–º–Ω—ã–π"

        # –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ tid
        new_name = None
        for n, t in list_unique_assignees():
            if str(t) == str(tid):
                new_name = n
                break
        if not new_name:
            await q.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
            return

        update_task_assignment(task_id, new_name, tid, by_who=who)
        t_after = get_task(task_id)

        if old_tid and str(old_tid) != str(tid):
            try:
                await context.bot.send_message(
                    chat_id=str(old_tid),
                    text=f"–ó–∞–¥–∞—á–∞ ¬´{t_after['task']}¬ª –±–æ–ª—å—à–µ –Ω–µ –Ω–∞ —Ç–µ–±–µ. –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {new_name}."
                )
            except Exception:
                pass

        try:
            await notify_new_assignment(context, to_tid=tid, task=t_after, who=who)
        except Exception:
            pass

        await q.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {new_name}.")
        await refresh_after_action(q, context)
        return

    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
    if data.startswith("take:"):
        task_id = int(data.split(":")[1])
        set_task_status(task_id, "in_progress")
        await q.edit_message_reply_markup(reply_markup=None)
        t = get_task(task_id)
        if not (t and (t["deadline"] or "").strip()):
            await q.message.reply_text(
                "–ü—Ä–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω: –≤–≤–µ–¥–∏ –¥–∞—Ç—É (YYYY-MM-DD / ¬´–∑–∞–≤—Ç—Ä–∞¬ª) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
                reply_markup=km_deadline_quick("take", task_id)
            )
            context.user_data["await_deadline_take"] = task_id
        else:
            await q.message.reply_text("–ó–∞–ø–∏—Å–∞–ª: –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ üòâ")
        return

    if data.startswith("reassign:"):
        task_id = int(data.split(":")[1])
        buttons = [[B(n, callback_data=f"reassign_to:{task_id}:{tid}")]
           for n, tid in list_unique_assignees() if str(tid or "").strip()]
        await q.message.reply_text("–ö–æ–º—É –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º?", reply_markup=KM(buttons))
        return

    if data.startswith("reassign_to:"):
        # —Ñ–æ—Ä–º–∞—Ç: reassign_to:<task_id>:<tid>
        _, sid, tid = data.split(":", 2)
        task_id = int(sid)
        t_before = get_task(task_id)
        old_tid = t_before["telegram_id"]
        who = q.from_user.full_name or "–ö–æ–ª–ª–µ–≥–∞"

        # –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ tid
        new_name = None
        for n, t in list_unique_assignees():
            if str(t) == str(tid):
                new_name = n
                break
        if not new_name:
            await q.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
            return

        update_task_assignment(task_id, new_name, tid, by_who=who)
        t_after = get_task(task_id)

        if old_tid and str(old_tid) != str(tid):
            try:
                await context.bot.send_message(
                    chat_id=str(old_tid),
                    text=f"–ó–∞–¥–∞—á—É ¬´{t_after['task']}¬ª —Å–Ω—è–ª–∏ —Å —Ç–µ–±—è. –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {new_name}."
                )
            except Exception:
                pass

        try:
            await notify_new_assignment(context, to_tid=tid, task=t_after, who=who)
        except Exception:
            pass

        await q.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ {new_name}.")
        await refresh_after_action(q, context)
        return

    # ---------- –ù–û–í–û–ï: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ ----------
    if data.startswith("done:") or data.startswith("mt_done:"):
        task_id = int(data.split(":")[1])
        kb = KM([[B("üìé –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª—é", callback_data=f"proof_yes:{task_id}")],
                 [B("–ë–µ–∑ —Ñ–∞–π–ª–∞", callback_data=f"proof_no:{task_id}")]])
        await q.message.reply_text("–ï—Å—Ç—å –ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–∞–π–ª/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ)?", reply_markup=kb)
        return

    if data.startswith("proof_yes:"):
        task_id = int(data.split(":")[1])
        context.user_data["await_proof_for_task"] = task_id
        await q.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–æ–∫/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ; –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ).")
        return

    if data.startswith("proof_no:"):
        task_id = int(data.split(":")[1])
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞
        set_task_status(task_id, "done")
        t = get_task(task_id)
        await q.message.reply_text("–ù—É –ª–∞–¥–Ω–æ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ —Ñ–∞–π–ª–∞–º–∏ üòâ")
        await broadcast_task_closed(context, t, performer_name=q.from_user.full_name or None, with_file_first_msg_id=None, src_chat=None)
        return

    if data.startswith("cant_do:") or data.startswith("mt_cant:"):
        task_id = int(data.split(":")[1])
        if (get_priority(task_id) or "normal") == "high":
            await q.message.reply_text("–≠—Ç–æ üî• –í–ê–ñ–ù–ê–Ø –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        context.user_data["await_deadline"] = task_id
        await q.message.reply_text(
            "–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—ë–º? –î–∞–π –¥–∞—Ç—É (2025-09-01 / ¬´–∑–∞–≤—Ç—Ä–∞¬ª / ¬´–∫ –ø—è—Ç–Ω–∏—Ü–µ¬ª‚Ä¶) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
            reply_markup=km_deadline_quick("postpone", task_id)
        )
        return

ALLOWED_WIPE = {str(VADIM_CHAT_ID), *map(str, ASSISTANT_CHAT_IDS)}

async def wipe_tasks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_WIPE:
        await update.message.reply_text("–ù–µ-–∞. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —à–µ—Ñ–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
        return
    await update.message.reply_text("–í–ù–ò–ú–ê–ù–ò–ï! –£–¥–∞–ª—é –í–°–ï –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö proposed/open/in_progress.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∫–æ–º–∞–Ω–¥–æ–π: /wipe_tasks_confirm")

async def wipe_tasks_confirm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ALLOWED_WIPE:
        await update.message.reply_text("–ù–µ-–∞. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —à–µ—Ñ–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.")
        return
    from db import _wipe_open_like
    n = _wipe_open_like()
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {n} (proposed/open/in_progress).")

# --------------------------------------------------------------------------------
# –¢–µ–∫—Å—Ç—ã –≤ –õ–°: –º–∞—Å—Ç–µ—Ä –ø—Ä–∞–≤–æ–∫, –¥–µ–¥–ª–∞–π–Ω—ã, –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º
# --------------------------------------------------------------------------------

async def on_private_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text or ""

    # 0) –ü–†–ò–û–†–ò–¢–ï–¢: –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ ¬´–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ¬ª
    if context.user_data.pop("await_reason", False) or ("rv_cancel_task" in context.user_data):
        from db import mark_cancelled
        task_id = int(context.user_data.pop("rv_cancel_task", 0) or 0)
        origin = context.user_data.pop("rv_origin", None)

        if task_id:
            mark_cancelled(task_id, (text or "").strip())
            await msg.reply_text("–û–∫, —Å–Ω—è–ª —Å –ø–æ–≤–µ—Å—Ç–∫–∏. –ü—Ä–∏—á–∏–Ω—É –∑–∞–ø–∏—Å–∞–ª. ‚úÖ")
            # –æ–±–Ω–æ–≤–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å
            class Dummy: pass
            d = Dummy(); d.message = msg; d.from_user = update.effective_user
            if origin == "flow":
                await send_flow_carousel_refresh(d, context)
            else:
                await send_checktasks_carousel_refresh(d, context)
        else:
            await msg.reply_text("–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ–Ω—ã. –û—Ç–∫—Ä–æ–π /checktasks –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if "rv_cancel_task" in context.user_data:
        from db import mark_cancelled
        task_id = int(context.user_data.pop("rv_cancel_task"))
        origin = context.user_data.pop("rv_origin", None)
        mark_cancelled(task_id, (text or "").strip())
        await msg.reply_text("–û–∫, —Å–Ω—è–ª —Å –ø–æ–≤–µ—Å—Ç–∫–∏. –ü—Ä–∏—á–∏–Ω—É –∑–∞–ø–∏—Å–∞–ª. ‚úÖ")
        # –æ–±–Ω–æ–≤–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å
        class Dummy: pass
        d = Dummy(); d.message = msg; d.from_user = update.effective_user
        if origin == "flow":
            await send_flow_carousel_refresh(d, context)
        else:
            await send_checktasks_carousel_refresh(d, context)
        return

    if context.user_data.get("rv_step") == "desc_edit":
        task_id = int(context.user_data.get("rv_edit_task"))
        # ‚úÖ –ø—Ä–∏–≤–æ–¥–∏–º ISO-–¥–∞—Ç—ã –≤–∏–¥–∞ 2025-09-11 –∫ ¬´11 –°–µ–Ω—Ç—è–±—Ä—è 2025¬ª
        text_clean = iso_to_human_in_text((text or "").strip())
        set_task_text(task_id, text_clean)
        t = get_task(task_id)
        cur_assignee = (t["assignee"] or "").strip()
        if not cur_assignee:
            context.user_data["rv_step"] = "assignee_pick"
            await msg.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
                                reply_markup=km_pick_assignee("rv_pick"))
        else:
            context.user_data["rv_step"] = "assignee_confirm"
            await msg.reply_text(
                f"–ü—Ä–∏–Ω—è–ª. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–µ—Ä–µ–Ω? (—Å–µ–π—á–∞—Å: {cur_assignee})",
                reply_markup=KM([[B("–î–∞", callback_data="rv:assignee_ok"),
                                B("–ù–µ—Ç", callback_data="rv:assignee_no")]])
            )
        return

    if context.user_data.get("rv_step") == "deadline_edit":
        task_id = int(context.user_data.get("rv_edit_task"))
        nd_raw = parse_any_date(text)
        nd = _ensure_future_or_today(nd_raw)
        if not nd:
            await msg.reply_text("–î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º –Ω–µ–ª—å–∑—è. –î–∞–π –≤–∏–¥ 2025-09-01 –∏–ª–∏ ¬´–∑–∞–≤—Ç—Ä–∞¬ª.")
            return
        set_task_deadline(task_id, nd, mark_postponed=False)
        context.user_data["rv_step"] = "priority_confirm"
        await msg.reply_text("–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞?", reply_markup=KM([
            [B("–î–∞", callback_data="rv:prio_high"), B("–ù–µ—Ç", callback_data="rv:prio_norm")]
        ]))
        return


    if "await_deadline" in context.user_data:
        task_id = int(context.user_data.pop("await_deadline"))
        nd_raw = parse_any_date(text)
        nd = _ensure_future_or_today(nd_raw)
        if not nd:
            await msg.reply_text("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º. –î–∞–π 2025-09-01 / ¬´–∑–∞–≤—Ç—Ä–∞¬ª.")
            return
        set_task_deadline(task_id, nd, mark_postponed=True, by_who=update.effective_user.full_name or "‚Äî")
        await msg.reply_text(f"–ü–µ—Ä–µ–Ω—ë—Å –Ω–∞ {fmt_date_human(nd)}. –ù–æ —è –≤–µ—Ä–Ω—É—Å—å üòâ")
        return

    if "await_deadline_take" in context.user_data:
        task_id = int(context.user_data.pop("await_deadline_take"))
        nd_raw = parse_any_date(text)
        nd = _ensure_future_or_today(nd_raw)
        if not nd:
            await msg.reply_text("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º. –î–∞–π 2025-09-01 / ¬´–∑–∞–≤—Ç—Ä–∞¬ª.")
            return
        set_task_deadline(task_id, nd, mark_postponed=False)
        await msg.reply_text(f"–î–µ–¥–ª–∞–π–Ω –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: {fmt_date_human(nd)}. –£–¥–∞—á–∏!")
        return

async def on_private_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "await_proof_for_task" not in context.user_data:
        return
    task_id = int(context.user_data.pop("await_proof_for_task"))
    t = get_task(task_id)
    performer_name = update.effective_user.full_name or None

    # 1) –°–Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É ¬´–∑–∞–∫—Ä—ã—Ç–æ¬ª
    await broadcast_task_closed(context, t, performer_name=performer_name, with_file_first_msg_id=None, src_chat=None)

    # 2) –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —à–µ—Ñ—É –∏ –≤—Å–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º
    try:
        src_chat = update.effective_chat.id
        src_msg  = update.message.message_id
        await context.bot.copy_message(chat_id=VADIM_CHAT_ID, from_chat_id=src_chat, message_id=src_msg)
        await copy_to_assistants(context, from_chat_id=src_chat, message_id=src_msg)
    except Exception:
        pass

    set_task_status(task_id, "done")
    await update.message.reply_text("–ü—Ä–∏–Ω—è–ª —Ñ–∞–π–ª, –ø–µ—Ä–µ–∫–∏–Ω—É–ª –Ω–∞—á–∞–ª—å—Å—Ç–≤—É. –ó–∞–¥–∞—á—É –∑–∞–∫—Ä—ã–ª. üß∑")

# --------------------------------------------------------------------------------
# –í–ï–ß–ï–†–ù–ò–ô –î–ê–ô–î–ñ–ï–°–¢ (–∏–∑ –±—É—Ñ–µ—Ä–æ–≤) + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–∞–π–ª-–æ—Ç—á—ë—Ç
# --------------------------------------------------------------------------------
async def testdigest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await evening_digest(context)
    await update.message.reply_text("–ü—Ä–æ–≥–Ω–∞–ª –≤–µ—á–µ—Ä–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Ä—É—á–Ω—É—é.")

async def evening_digest(context: ContextTypes.DEFAULT_TYPE):
    # 1) –ì–æ–ª–æ—Å–æ–≤—ã–µ ‚Üí —Ç–µ–∫—Å—Ç
    for chat_id, items in list(VOICE_BUFFER.items()):
        for (mid, uname, fname, file_id, dt) in items:
            try:
                text = await transcribe_telegram_file(context.bot, file_id)
            except Exception:
                text = ""
            if text:
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –≤ ¬´—Ç–µ–∫—Å—Ç–æ–≤—ã–π¬ª –±—É—Ñ–µ—Ä —Å username/full_name
                MESSAGE_BUFFER.setdefault(chat_id, []).append((mid, uname, fname, text, dt))
                logger.info(f"Voice transcribed from chat {chat_id} by @{uname or '‚Äî'} ({fname}): {text}")
        VOICE_BUFFER[chat_id] = []

    # 2) LLM-—Ñ–∏–ª—å—Ç—Ä
    created = 0
    for chat_id, items in list(MESSAGE_BUFFER.items()):
        for (mid, username, full_name, text, dt) in items:
            if not text:
                continue

            msg_link = _tg_message_link(chat_id, mid)
            names = get_assignee_name_list()
            llm = llm_route(
                text, names,
                author_username=(username or "‚Äî"),
                message_date=dt.astimezone(TZINFO).strftime("%Y-%m-%d"),
                message_link=msg_link
            ) or {}

            is_task = bool(llm.get("looks_like_task")) if llm else looks_like_task(text)
            pr      = (llm.get("priority") or "normal") if llm else extract_priority(text)
            dl      = (llm.get("deadline") or None)     if llm else extract_deadline(text)
            ass_llm = llm.get("assignee") if llm else None

            logger.info(
                "DIGEST LLM: is_task=%s conf=%s pr=%s dl=%s assignee=%s text=%r",
                is_task, (llm.get("confidence") if llm else None), pr, dl, ass_llm, text
            )

            if not is_task:
                continue

            assignee_name, assignee_tid = None, None
            if ass_llm:
                for n, tid in list_unique_assignees():
                    if n == ass_llm:
                        assignee_name, assignee_tid = n, tid
                        break

            desc = (llm.get("description") or text).strip()
            desc = iso_to_human_in_text(desc)

            task_id = insert_task(
                desc, assignee_name or "", assignee_tid or "", dl or "",
                priority=pr, source="digest", source_chat_id=str(chat_id), source_message_id=mid,
                status="proposed", link=(llm.get("source_link") or msg_link or "")
            )
            logger.info("DIGEST: created proposed task_id=%s chat=%s msg=%s desc=%r", task_id, chat_id, mid, desc)
            created += 1

            # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
            pr_h = "–í–∞–∂–Ω–∞—è üî•" if pr == "high" else "–û–±—ã—á–Ω–∞—è"
            assignee_line = fmt_assignee_with_nick(assignee_name or "‚Äî", assignee_tid)
            link_line = f"\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª: {msg_link}" if msg_link else ""

            await notify_assistants(
                context,
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ (–≤–µ—á–µ—Ä–Ω–∏–π —Ä–∞–∑–±–æ—Ä) ‚Äî –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n\n"
                f"üß© –û–ø–∏—Å–∞–Ω–∏–µ: {h(desc)}\n"
                f"ü§° –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_line}\n"
                f"üìÖ –î–µ–¥–ª–∞–π–Ω: {fmt_date_human(dl)}\n"
                f"‚ùóÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {pr_h}\n"
                f"ID: #{task_id}"
                f"{link_line}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /checktasks, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            )

    # —á–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä
    MESSAGE_BUFFER.clear()

    # –∫–æ—Ä–æ—Ç–∫–∏–π –∏—Ç–æ–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º –∏ —à–µ—Ñ—É
    summary = f"‚è∞ –í–µ—á–µ—Ä–Ω–∏–π —Ä–∞–∑–±–æ—Ä: –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {created}.\n–û—Ç–∫—Ä–æ–π /checktasks –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    try:
        await context.bot.send_message(chat_id=str(VADIM_CHAT_ID), text=summary)
    except Exception as e:
        logger.warning("–ò—Ç–æ–≥ –¥–Ω—è –Ω–µ –¥–æ—à—ë–ª –¥–æ VADIM_CHAT_ID: %s", e)
    await notify_assistants(context, summary)




# --------------------------------------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# --------------------------------------------------------------------------------
async def on_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é —Ç—Ä–∞—Å—Å—É, –Ω–µ –ø–∞–¥–∞–µ–º
    logger.exception("Update error: %s", context.error)

async def nt_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for k in ("nt_task_text","nt_assignee_name","nt_assignee_tid","nt_priority","in_newtask"):
        context.user_data.pop(k, None)
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ.")
    return ConversationHandler.END


def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(
        MessageHandler(filters.ChatType.PRIVATE & filters.COMMAND, first_touch_check),
        group=-1
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("track", track_cmd))
    app.add_handler(CommandHandler("checktasks", checktasks_cmd))
    app.add_handler(CommandHandler("currentflow", currentflow_cmd))
    app.add_handler(CommandHandler("mytasks", mytasks_cmd))
    app.add_handler(CommandHandler("testdigest", testdigest_cmd))
    app.add_handler(CommandHandler("report", report_cmd))
    app.add_handler(CommandHandler("outdated", outdated_cmd))


    newtask_conv = ConversationHandler(
        entry_points=[CommandHandler("newtask", newtask_cmd)],
        states={
            NT_TEXT:     [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, nt_text)],
            NT_ASSIGNEE: [CallbackQueryHandler(nt_pick_assignee_cb, pattern=r"^nt_pick:")],
            NT_PRIORITY: [CallbackQueryHandler(nt_pick_priority_cb, pattern=r"^nt_pr:")],
            NT_DEADLINE: [
                MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, nt_deadline),
                CallbackQueryHandler(nt_deadline_quick_cb, pattern=r"^dlq:newtask:")
            ],
        },
        fallbacks=[CommandHandler("cancel", nt_cancel)],
    )
    app.add_handler(newtask_conv, group=0)

    app.add_handler(CallbackQueryHandler(on_callback), group=1)

    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, on_private_text))
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & (filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.VOICE),
        on_private_file
    ))

    app.add_handler(CommandHandler("wipe_tasks", wipe_tasks_cmd))
    app.add_handler(CommandHandler("wipe_tasks_confirm", wipe_tasks_confirm_cmd))

    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND, on_group_text))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & (filters.VOICE | filters.AUDIO), on_group_voice))

    # –î–∞–π–¥–∂–µ—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–æ–≤ (LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è) ‚Äî –∫–∞–∫ –±—ã–ª–æ
    app.job_queue.run_daily(
        evening_digest,
        time=dtime(hour=WORK_END_HOUR, minute=0, tzinfo=TZINFO),
        days=(0,1,2,3,4)
    )

    
    app.add_error_handler(on_error)

    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
